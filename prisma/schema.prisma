// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  typeUserId    String?

  TypeUser TypeUser? @relation(fields: [typeUserId], references: [id], onDelete: Cascade)

  accounts     Account[]
  sessions     Session[]
  Event        Event[]
  AcademicWork AcademicWork[]
  Rating       Rating[]
  Subscription Subscription[]
  Comment      Comment[]
  Diary        Diary[]

  @@map("users")
}

model TypeUser {
  id   String @id @default(cuid())
  name String

  User User[]
}

model Event {
  id              String   @id @default(cuid())
  title           String
  description     String
  startDate       DateTime
  endDate         DateTime
  location        String
  maxParticipants Int?

  userId String

  User         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  AcademicWork AcademicWork[]
  Subscription Subscription[]
  Diary        Diary[]
}

model AcademicWork {
  id          String @id @default(cuid())
  title       String
  description String

  userId  String
  eventId String

  User    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Event   Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  Rating  Rating[]
  Comment Comment[]
}

model Rating {
  id     String @id @default(cuid())
  rating Float

  userId         String
  academicWorkId String

  User         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  AcademicWork AcademicWork @relation(fields: [academicWorkId], references: [id], onDelete: Cascade)
}

model Subscription {
  id   String   @id @default(cuid())
  date DateTime

  userId  String
  eventId String

  User  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  Event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Diary {
  id          String   @id @default(cuid())
  date        DateTime
  hours       String?
  description String

  eventId String
  userId  String

  User  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  Event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Comment {
  id      String   @id @default(cuid())
  date    DateTime
  comment String

  userId         String
  academicWorkId String

  User         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  AcademicWork AcademicWork @relation(fields: [academicWorkId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
