generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  typeUser      String?

  AcademicWork AcademicWork[]
  Comment      Comment[]
  Diary        Diary[]
  Rating       Rating[]
  Subscription Subscription[]
  accounts     Account[]
  sessions     Session[]

  @@map("users")
}

model Event {
  id           String         @id @default(cuid())
  title        String
  description  String
  startDate    DateTime
  endDate      DateTime?
  location     String
  imageId      String
  Diary        Diary[]
  Image        Image          @relation(fields: [imageId], references: [id], onDelete: Cascade)
  Subscription Subscription[]
}

model Image {
  id    String  @id @default(cuid())
  url   String
  Event Event[]
}

model AcademicWork {
  id          String    @id @default(cuid())
  title       String
  description String?
  image       String?
  userId      String
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Comment     Comment[]
  Rating      Rating[]
}

model Rating {
  id             String       @id @default(cuid())
  rating         Float
  userId         String
  academicWorkId String
  AcademicWork   AcademicWork @relation(fields: [academicWorkId], references: [id], onDelete: Cascade)
  User           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id      String   @id @default(cuid())
  date    DateTime
  userId  String
  eventId String
  Event   Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  User    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Diary {
  id          String   @id @default(cuid())
  date        DateTime
  hours       String?
  description String
  eventId     String
  userId      String
  Event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id             String       @id @default(cuid())
  date           DateTime
  comment        String
  userId         String
  academicWorkId String
  AcademicWork   AcademicWork @relation(fields: [academicWorkId], references: [id], onDelete: Cascade)
  User           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
